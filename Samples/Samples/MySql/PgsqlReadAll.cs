using LazurdIT.FluentOrm.Common;
using MySqlConnector;
using Samples.DAL.Repositories.MsSql;
using Samples.DAL.Repositories.MySql;
using System.Data.SqlClient;

internal class MySqlReadAll
{
    internal static void TestComplexRead(MySqlConnection connection)
    {
        //test time taken to create 10000 students
        Console.WriteLine("Testing complex read");

        Console.WriteLine($"Getting students");
        var startTime = DateTime.Now;
        Console.Write($"Start: {startTime}");

        //StatCollection stats = new();
        //var statRecords = stats.RawSelect("Select count(*) as student_count from Tbl_Student", connector.Connection)
        //     .Execute();
        //Console.WriteLine();
        //foreach (var statRecord in statRecords)
        //{
        //    Console.WriteLine($"Students Count: {statRecord.Count}");
        //}
        //return;

        //return;
        MySqlStudentRecordRepository students = new();

        int i = 0;

        var listData = students.Select(connection)
                .Where(cm => cm
                        .Like(m => m.Name, "A%")
                        .Between(m => m.Id, 0, 16955)
                        .Gt(m => m.Id, 1245)
                        .Lte(f => f.CreatedAt, DateTimeOffset.UtcNow))
                .Returns(fm => fm
                                .ExcludeAll()
                                .Include(f => f.Name)
                                .Include(f => f.Id))
                .OrderBy(om => om
                                .Random()
                                .FromField(f => f.Name, OrderDirections.Descending))
                .Execute(pageNumber: 1, recordsCount: 20);

        Console.WriteLine();
        foreach (var student in listData)
        {
            Console.WriteLine($"st ({++i}): id:{student?.Id}, name: {student?.Name}");
        }

        var endTime = DateTime.Now;
        Console.Write($" => {i} students");
        Console.Write($" => {endTime}");
        Console.WriteLine($" : {(endTime - startTime).TotalSeconds} second(s)");
    }

    internal static void TV2Page(SqlConnection connector, int pageNumber = 0, int recordsCount = 0)
    {
        //test time taken to create 10000 students
        Console.WriteLine("Testing Using v2");

        Console.WriteLine($"Getting students");
        var startTime = DateTime.Now;
        Console.Write($"Start: {startTime}");

        //StatCollection stats = new();
        //var statRecords = stats.RawSelect("Select count(*) as student_count from Tbl_Student", connector.Connection)
        //     .Execute();
        //Console.WriteLine();
        //foreach (var statRecord in statRecords)
        //{
        //    Console.WriteLine($"Students Count: {statRecord.Count}");
        //}
        //return;

        //return;
        MsSqlStudentRecordRepository students = new();

        int i = 0;

        var listData = students.Select(connector)
                //.Where(cm => cm
                //        .Eq(m => m.Name, "Ayla McGlynn")
                //        .Between(m => m.Id, 14682, 16955)
                //        .Gt(m => m.Id, 1245)
                //        .Raw(m => m.Id, "> 1245")
                //        .Lte(f => f.CreatedAt, DateTimeOffset.UtcNow))
                .Returns(fm => fm
                                //.ExcludeAll()
                                .Include(f => f.Name)
                                .Include(f => f.Id))
                //.OrderBy(om => om
                //                //.FromField(f => f.Name, OrderDirections.Descending)
                //                .Random())
                .Execute(pageNumber: pageNumber, recordsCount: recordsCount);

        //.ExecutePage(1, 20)

        //.Aggregate
        Console.WriteLine();
        foreach (var student in listData)
        {
            Console.WriteLine($"st ({++i}): id:{student?.Id}, name: {student?.Name}");
            //Console.Write($"\r{new string(' ', 70)}\rst ({++i}): id:{student?.Id}, name:{student?.Name}");
        }

        //Console.WriteLine();

        var endTime = DateTime.Now;
        Console.Write($" => {i} students");
        Console.Write($" => {endTime}");
        Console.WriteLine($" : {(endTime - startTime).TotalSeconds} second(s)");
    }

    /// <summary>
    /// Handles ClassName.
    /// </summary>
    [FluentTable]
    public partial class StudentStat : IFluentModel
    {
        [FluentField("cnt", isPrimary: true, autoGenerated: true)]
        public long StudentsCount { get; set; }

        [FluentField("Fld_Student_Updated_At")]
        public DateTimeOffset UpdatedAt { get; set; }

        public override string ToString()
        {
            return $"Student => StudentsCount: {StudentsCount}, UpdatedAt: {UpdatedAt}";
        }
    }

    internal static void TV2AggregatePage(SqlConnection connector, int pageNumber = 0, int recordsCount = 0)
    {
        //test time taken to create 10000 students
        Console.WriteLine("Testing Using v2 Page");

        Console.WriteLine($"Getting students");
        var startTime = DateTime.Now;
        Console.Write($"Start: {startTime}");

        MsSqlStudentRecordRepository stds = new();
        var statRecords = stds.Aggregate<StudentStat>(connector)
            .Aggregate(a => a.Count(f => f.Id, "cnt"))
            .GroupBy(g => g.Include(f => f.UpdatedAt))
            .OrderBy(o => o.FromCountAggregate(f => f.Id, alias: "cnt"))
            .Where(w => w.IsNotNull(f => f.UpdatedAt).Gt(f => f.Id, 1))
            .Having(h => h.HavingAggregate(f => f.Id, (prop) => Ag.CountForField(prop, "cnt"),
            (prop, p) => p.Gte(prop, 5)))
             .Execute();
        Console.WriteLine();
        foreach (var statRecord in statRecords)
        {
            Console.WriteLine(statRecord);
        }
        return;

        //return;
        MsSqlStudentRecordRepository students = new();

        int i = 0;

        var listData = students.Select(connector)
                //.Where(cm => cm
                //        .Eq(m => m.Name, "Ayla McGlynn")
                //        .Between(m => m.Id, 14682, 16955)
                //        .Gt(m => m.Id, 1245)
                //        .Raw(m => m.Id, "> 1245")
                //        .Lte(f => f.CreatedAt, DateTimeOffset.UtcNow))
                .Returns(fm => fm
                                //.ExcludeAll()
                                .Include(f => f.Name)
                                .Include(f => f.Id))
                //.OrderBy(om => om
                //                //.FromField(f => f.Name, OrderDirections.Descending)
                //                .Random())
                .Execute(pageNumber: pageNumber, recordsCount: recordsCount);

        //.ExecutePage(1, 20)

        //.Aggregate
        Console.WriteLine();
        foreach (var student in listData)
        {
            Console.WriteLine($"st ({++i}): id:{student?.Id}, name: {student?.Name}");
            //Console.Write($"\r{new string(' ', 70)}\rst ({++i}): id:{student?.Id}, name:{student?.Name}");
        }

        //Console.WriteLine();

        var endTime = DateTime.Now;
        Console.Write($" => {i} students");
        Console.Write($" => {endTime}");
        Console.WriteLine($" : {(endTime - startTime).TotalSeconds} second(s)");
    }
}